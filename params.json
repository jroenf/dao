{"body":"### A Zend Framework resource made by Jeroen Franse.\r\nTo keep things flexible when writing a webapp I wanted to be able to easily switch data source. I wanted to be able to use the same models for my application and switch between a database, a XML-RPC server or any data source.\r\n\r\nFor that purpose I created a Data_Acces_Object (Dao) interface and two concrete classes (one for database and one for server) implementing the interface. \r\n\r\n### Choosing the data resource\r\n\r\nSwitching between data sources is done by setting the right parameters in the .ini file so everything is controlled in a central place. In the index.php file you can see this happening: \r\n\r\n    $dao = new Zend_Config_Ini(APPLICATION_PATH.'/configs/dao-tabledefinitions.ini',APPLICATION_ENV);  \r\n    or  \r\n    $dao = new Zend_Config_Ini(APPLICATION_PATH.'/configs/dao-xmlrpc.ini',APPLICATION_ENV);  \r\n\r\n\r\nHave a look at the dao-tabledefinitions.ini file:\r\n\r\n    resources.dao.dataresource = tabledefinitions  \r\n    resources.dao.class = Model_Dao_Tabledefinition_Default\r\n\r\nthis dao dataresource refers to a tabledefinition and a classname for the data access object.\r\nIn the dao-xmlrcp.ini file:\r\n\r\n\r\n    resources.dao.dataresource = http://www.domain.nl/xmlrpc  \r\n    resources.dao.class = Model_Dao_Xmlrpc_Servername\r\n\r\n\r\nI really like setting things up in in .ini file. Classes that setup resouces for your application inherit from Zend_Application_Resouce_Abstract. You can see three of them written by myself in this repo, look for them in the library in the Roen directory. Here we'll look at the the Roen_Application_Resource_Dao object and how it translates settings to a resource for the application:\r\n\r\n    <?php\r\n    /**\r\n     * Application resource: Data Acces Object\r\n     * Kan een xmlrcp-server zijn of een tabledefinition.\r\n     */\r\n    class Roen_Application_Resource_Dao\r\n    extends Zend_Application_Resource_ResourceAbstract {\r\n        \r\n        protected $_dao;\r\n    \r\n        public function init() {\r\n            return $this->_getDao();\r\n        }\r\n    \r\n        protected function _getDao() {\r\n            if (null === $this->_dao) {\r\n                $options = $this->getOptions();\r\n                $dataresource = $options['dataresource'];\r\n                $dataresourceClass =$options['class'];\r\n    \r\n                // dataresource kan vanuit de bootstrap komen, \r\n                // bijv een bootstrap.resource->multidb of ->tabledefinition\r\n                $bootstrapOptions = $this->getBootstrap()->getOptions();\r\n                if (isset($bootstrapOptions['resources'][$dataresource])) {\r\n                    $dataresource = $this->getBootstrap()\r\n                            ->bootstrap($dataresource)\r\n                            ->getResource($dataresource);\r\n                }\r\n                if (class_exists($dataresourceClass)) {\r\n                    $this->_dao = new $dataresourceClass($dataresource);\r\n                }\r\n            }\r\n            return $this->_dao;\r\n        }\r\n    }\r\n\r\n### Further implementation\r\nWhile I was on the right path by separating data access from model building, the rest of the implementation (the way the data is bound to the domain-models) is a little clumsy at the least. Later I found out more about dependency injection and Object Relational Mappers such as Doctrine and Propel. But getting the XML-RPC server to work and using my Zend Framework skills to easily switch between data sources really gave me a kick and hopefully shows some developer skills.\r\n","tagline":"Zend Framework setup with flexible Data Access Object. Acces your data from a database, or through an XML-RCP client with the flick of a switch.","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Data Acces Object as a resource"}